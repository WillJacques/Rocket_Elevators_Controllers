'N.B. THIS ELEVATOR HAS RC = 0 SO IF IN YOUR SCENARIO RC=1 SUBSTRACT WANTED FLOOR BY 1 :)'

DEFINE Battery USING id
    battery_ID : id,
    Columnlist : EMPTY LIST

    DEFINE Column USING id, lowFloor, highFloor and elevator_amount
        column_ID: id,                              'Makes an idividual ID for each column'
        column_Online: TRUE,                        'Determine if column can operate'
        elevator_amount: elevator_amount,           'Determine how many elevators in column'
        lowFloor : lowFloor                         'lowfloor = lowest service point excluding RC'
        highFloor : highFloor                       'highfloor = Highest service point excluding RC'
        queue_FloorRequestUP : [EMPTY LIST],        'Waiting list for a up elevator'
        queue_FloorRequestDOWN : [EMPTY LIST],      'Waiting list for a down elevator'
        powered : TRUE,                             'If theres power in elevator'
        preferedFloor : 0,                          'Prefered floor given by setpreferedfloor sequence'
        Floorlist : EMPTY LIST
        elevatorList : EMPTY LIST
        clock : Actual_Time (00:00:00),             'Added a clock in each column to show time and also record request response time'

    
        DEFINE Floor USING id:
            floor_ID: id,
            buttonUp : FALSE,           'If there is a buttonUp on floor'
            buttonUpLight : FALSE,
            buttonDown : FALSE,         'If there is a buttonDown on floor'
            buttonDownLight : FALSE, 
            floorDoorClose : TRUE,
            floorDoorOpen : FALSE,
            userActionLog : EMPTY LIST  'The array will receive floor button calls and elevator direction on door opening'
        ENDDEFINE

        'How the floor must be created with lowfloor and highfloor deserved and add button on the floor'
        SEQUENCE "createFloorList" USING Column.lowFloor and Column.highFloor
            IF Column.lowFloor is smaller or equal to 0
                FOR all numbers between Column.lowFloor included and 0 included,
                SET Floor_number TO INSTANTIATE Floor WITH number
                THEN add Floor to Floorlist
                ENDFOR
                FOR all numbers between 0 excluded and Column.highFloor included
                SET Floor_number TO INSTANTIATE Floor WITH number
                THEN add Floor to Floorlist
                ENDFOR
            ELSE
                SET Floor_0 TO INSTANTIATE Floor WITH 0 
                FOR all numbers between Column.lowFloor included and Column.highFloor included, 
                SET Floor_number TO INSTANTIATE Floor WITH number 
                THEN add Floor to Floorlist
                ENDFOR
            ENDIF
            'Remove up button to call for a down elevator when on minimum floor'
            IF Column.Floor_lowFloor is smaller than 0
                SET Column.Floor_lowFloor.buttonUp to FALSE
            ELSE
                SET Column.Floor_0.buttonUp to FALSE
            ENDIF
            'Remove down button to call for a up elevator when on minimum floor'
            IF Column.Floor_highFloor is higher than 0
                SET Column.Floor_highFloor.buttonDown to FALSE
            ELSE
                SET Column.Floor_0.buttonDown TO FALSE
            ENDIF
            'Add a display on each floor desserved by the column for each elevator in it'
            FOR each Elevator in Column add a floorDisplay#Elevator_ID variable and make it equal to Elevator_ID.currentFloor variable
            ENDFOR
        ENDSEQUENCE

        'To create all floors available in a column'
        Column CALL "createFloorList"

        'Used to change prefered floor during operation called later in elevator operate'
        SEQUENCE "setpreferedFloor" USING Elevator.clock
            IF Elevator.clock is between 11:30 and 12:30 THEN        
                SET Column.preferedfloor to highFloor value
            ELSE IF Elevator.clock is between 16:30 and 17:30 THEN
                SET Column.preferedfloor to highFloor value
            ELSE THEN
                SET Column.preferedFloor to 0
            ENDIF
        ENDSEQUENCE
        
        'How the elevators must be created with ID with a RC(0) button included'
        DEFINE Elevator USING id,
            ID: id,
            direction : "IDLE"
            buttonNumber : [0],                     'Inside elevator buttonlist LIST'
            currentFloor : Column.preferedFloor,    'Actual elevator's position'
            goingToFloor : EMPTY,                   'Target elevator floor value'
            queueToFloor : EMPTY,                   'List of assignated floors to elevator'
            pendingQueue : EMPTY,                   'List of floor button pressed in error (opposite to elevator direction)'
            weightMesure : 0,                       'kg'       
            weightCapacity : 2000,                  'Kg'
            heavyLoad : FALSE                       'If elevator if 95% full it doesn't receive call from column'
            elevatorDoorClose : TRUE,
            elevatorDoorOpen : FALSE,
            emergencyButtonPushed : FALSE,
            elevator_Online : TRUE,
            upLight : FALSE, 
            downLight : FALSE,
            lightsUpButton : EMPTY LIST             'List of number with light UP'
            OpendoorButton : FALSE
            ClosedoorButton : FALSE

            'Add all floor buttons that will be used in the elevator'
            SEQUENCE "addbuttonNumbertoList" USING Column.lowFloor and Column.highFloor
                IF Column.lowFloor is smaller or equal to 0
                    FOR all numbers between Column.lowFloor included and 0 included, 
                    ADD number to Elevator.buttonNumber list
                    ENDFOR
                    FOR all numbers between 0 excluded and Column.highFloor included
                    ADD number to Elevator.buttonNumber list 
                ELSE IF lowFloor greater than 0
                    ADD 0 to buttonNumber list
                    FOR all numbers between Column.lowFloor and Column.highFloor, 
                    ADD number to Elevator.buttonNumber list 
                    ENDFOR
                ENDIF
            ENDSEQUENCE

            'Calls the action to add button to the control panel inside elevator'
            Elevator CALL "addbuttonNumbertolist"

            'Used to verify total weight load during operation called later in elevator operate'
            SEQUENCE "verifyWeight" USING weightMesure and weightCapacity
                IF weightMesure is greater than 0.95 x weightCapacity THEN 'Actions heavyload mode if weight in elevator is over 95% capacity'
                    SET Elevator.heavyLoad to TRUE
                ELSE THEN
                    SET Elevator.heavyLoad to FALSE
                ENDIF
                WHILE weightMesure greater than weightCapacity THEN
                    SET elevatorDoorClose to FALSE
                    WAIT for 4 seconds THEN
                    SET elevatorDoorOpen to TRUE
                    SET elevator_Online TO FALSE THEN
                    Display message : "You are exceeding weight capacity !"
                ENDWHILE
                IF elevatorDoorOpen is TRUE
                    SET elevatorDoorOpen to FALSE
                    WAIT for 4 seconds THEN
                    SET elevatorDoorClose to TRUE
                ENDIF
                SET elevator_Online TO TRUE
            ENDSEQUENCE

            'Used to verify if both doors, floor et elevator one are completly closed and display a message if not, called later in elevator operate'
            SEQUENCE "verifyDoorClose" USING elevatorDoorClose and floorDoorClose
                WHILE elevatorDoorClose and floorDoorClose are not both TRUE THEN
                    Display message : "Something's blocking the door !"
                ENDWHILE
            ENDSEQUENCE

            'Operating sequence for each elevator in column'
            SEQUENCE "operate"

                'While not on target floor'
                WHILE Elevator.currentFloor is not Elevator.goingToFloor THEN
                    IF Column send new floor call to elevator THEN  
                        IF Elevator.direction is "UP" THEN
                            ADD Column.newFloor to Elevator.queueToFloor THEN
                            SORT Ascending Elevator.queueToFloor list THEN
                            Elevator.goingToFloor becomes first number in Elevator.queueToFloor list
                        ELSE IF Elevator.direction = "DOWN" THEN
                            ADD Column.newFloor to Elevator.queueToFloor THEN
                            SORT Descending Elevator.queueToFloor list THEN
                            Elevator.goingToFloor becomes first number in Elevator.queueToFloor list
                        ELSE 
                            ADD Column.newFloor to Elevator.queueToFloor list 
                            Elevator.goingToFloor becomes first number in Elevator.queueToFloor list
                            IF Elevator.goingToFloor is smaller than Elevator.currentFloor
                                SET Elevator.direction to "DOWN"
                            ELSE
                                SET Elevator.direciton to "UP"
                            ENDIF
                        ENDIF
                    ELSE IF Elevator.direction is "UP" THEN
                        increment Elevator.currentFloor
                    ELSE IF Elevator.direction is "DOWN" THEN
                        decrement Elevator.currentFloor
                    ENDIF
                ENDWHILE

                'When elevator arrives to target floor'
                REMOVE value from Elevator.goingToFloor
                REMOVE first number in list Elevator.queueToFloor
                REMOVE Floor_ID from Elevator.lightsUpButton
                
                'Open the doors'
                SET elevatorDoorClose to FALSE
                SET floorDoorClose to FALSE
                IF Elevator.direction is "UP"
                    SET Floor.ButtonUpLight to FALSE    'To indicate user if his elevator is arrived'
                    SET Elevator.upLight to TRUE        'To indicate user if the elevator is going up or down'
                ELSE IF Elevator.direction is "DOWN"
                    SET Floor.ButtonDownLight to FALSE  'To indicate user if his elevator is arrived'
                    SET Elevator.downLight to TRUE      'To indicate user if the elevator is going up or down'
                ENDIF
                ADD to Floor.userActionLog {Column.Clock, Elevator.Direction}
                WAIT 4 seconds 'Door opening'
                SET elevatorDoorOpen to TRUE
                SET floorDoorOpen to TRUE
            
                WAIT 7 seconds 'With open door'

                SET elevatorDoorOpen to FALSE
                SET floorDoorOpen to FALSE
                WAIT 4 seconds 'Door closing'
                SET elevatorDoorClose to TRUE
                SET floorDoorClose to TRUE
                SET Elevator.upLight to FALSE 
                SET Elevator.downLight to FALSE
                
                'Security verification and look at clock if elevator needs to change his preferedfloor'
                Elevator CALL "verifyWeight"
                Elevator CALL "verifyDoorClose"
                Column CALL "setpreferedFloor"

                '---BACKUP---' '---If there's an elevator direction change to IDLE on an alarm---' '---NOT NECESSARY FOR THE MOMENT---'
                '---Security line to be sure to continue on the same side as before an alarm during security verification---'
                'IF there is a number in Elevator.queueToFloor
                    'Elevator.goingToFloor becomes first number in Elevator.queueToFloor list
                    'IF Elevator.goingToFloor is greater than Elevator.currentFloor THEN
                        'SET Elevator.direction to "UP"
                    'ELSE 
                        'SET Elevator.direction to "DOWN"
                    'ENDIF
                'ENDIF
                '---ENDBACKUP---'

                'Waiting for user to press floor buttons inside elevator'
                READ to Elevator.ButtonNumber pressed by user inside the elevator
        
                'Response to different call buttons on user loading'
                IF Elevator.direction is "UP" THEN
                    ADD Elevator.ButtonNumber to lightsUpButton list
                    FOR each button in lightsUpButton list
                    SET lightsUpButton ON.
                    ENDFOR
                    IF Elevator.ButtonNumber greater than Elevator.currentFloor THEN
                        ADD Elevator.ButtonNumber to Elevator.queueToFloor list THEN
                        SORT Ascending Elevator.queueToFloor list                           'BUBBLE SORT METHOD WILL BE USED'
                    ELSE IF Elevator.ButtonNumber smaller than Elevator.currentFloor THEN
                        ADD Elevator.ButtonNumber to Elevator.pendingQueue list             'If the user board on the opposite side wanted'
                    ENDIF
                ELSE IF Elevator.direction is "DOWN" THEN
                    ADD Elevator.ButtonNumber to lightsUpButton list
                    FOR each button in lightsUpButton list
                    SET lightsUpButton ON.
                    ENDFOR
                    IF Elevator.ButtonNumber smaller than Elevator.currentFloor THEN
                        ADD Elevator.ButtonNumber to Elevator.queueToFloor list THEN
                        SORT Descending Elevator.queueToFloor list                          'BUBBLE SORT METHOD WILL BE USED'
                    ELSE IF Elevator.ButtonNumber greater than Elevator.currentFloor THEN
                        ADD Elevator.ButtonNumber to Elevator.pendingQueue list             'If the user board on the opposite side wanted'
                    ENDIF
                ENDIF
                
                'After all distribution in list, after sorting queue, give a value to going to floor with next number in queue'
                SET Elevator.goingToFloor to the next number FROM Elevator.queueToFloor list

                'If there was another floor in queue'
                IF Elevator.goingToFloor NOT EMPTY THEN
                    Elevator CALL "operate"
                    BREAK   '---BREAK is used to ERASE ALL NEXT IF ACTION TO BE SURE THEY DON'T STACK OVER IN MEMORY---'

                'If there was no other floor in direction queue but a user took wrong elevator and push a button in opposite direction'
                ELSE IF Elevator.goingToFloor list is EMPTY AND Elevator.pendingQueue list is NOT EMPTY THEN
                    SEND Elevator.pendingQueue list to Elevator.QueueToFloor list
                        IF Elevator.direction is "UP" THEN
                            SET Elevator.direction to "DOWN"
                            SORT Descending Elevator.queueToFloor list                      'BUBBLE SORT METHOD WILL BE USED'
                        ELSE IF Elevator.direction is "DOWN" THEN
                            SET Elevator.direction to "UP"
                            SORT Ascending Elevator.queueToFloor list                       'BUBBLE SORT METHOD WILL BE USED'
                        ENDIF
                    SET Elevator.goingToFloor to the next number FROM Elevator.queueToFloor list
                    Elevator CALL "operate"
                    BREAK   '---BREAK is used to ERASE ALL NEXT IF ACTION TO BE SURE THEY DON'T STACK OVER IN MEMORY---'

                'If there's no queue at all, wait for a call from Column 30 seconds after that time go to prefered floor'
                ELSE IF Elevator.QueueToFloor is EMPTY AND Elevator.pendingQueue is EMPTY THEN
                    WAIT 30 seconds for Column send new floor call to elevator THEN
                    SET Elevator.goingToFloor to Column.preferedFloor 
                    IF Elevator.goingToFloor is smaller than Elevator.currentFloor
                        SET Elevator.direction to "DOWN"
                    ELSE IF Elevator.goingToFloor greater than Elevator.currentFloor
                        SET Elevator.direction to "UP"
                    ENDIF
                    Elevator CALL "operate"
                ENDIF
                'WATCH OUT, MAYBE STACKED OPERATIONS PENDING IF FIRST CONDITION CALL OPERATE IF BREAK DOESN'T WORK, WILL BE FIXED IN PRODUCTION ! OR ADDED AS FEATURE :) '
            ENDSEQUENCE

            WHILE Column_Online is TRUE AND Elevator_Online is TRUE
                Elevator CALL "operate"
            ENDWHILE
        ENDDEFINE
        
        SEQUENCE "createElevatorList" USING elevator_amount, lowFloor, highFloor
            FOR elevator_amount in Column 
                BEGIN with iterator equal 1
                SET Elevator_iterator TO INSTANTIATE Elevator WITH iterator THEN 
                ADD Elevator to Column.elevatorList
                increment iterator
            ENDFOR
        ENDSEQUENCE

        Column CALL "createElevatorList"
        
        'Reaction to a floor button pressed'
        SEQUENCE "delegate" USING Floor.buttonUp and Floor.buttonDown
            IF user press Floor.buttonUp THEN
                Floor.ButtonUpLight = TRUE
                ADD to Floor.userActionLog {Column.clock, "BUTTON UP"}
                SET resultArray as an EMPTY LIST
                SET scoreArray as an EMPTY LIST
                SET bestElevatorID to 0                                 'ALL elevators ID should be Higher than 0 on createElevatorList'
                FOR all elevators in Column
                    BEGIN with iterator equal to 1
                    IF Elevator#iterator.direction is "UP" AND Elevator#iterator.currentFloor is smaller than Floor.floor_ID AND elevator.heavyLoad is FALSE AND elevator_Online is TRUE
                        ADD iterator to resultArray list
                        ADD |Elevator_#iterator.currentFloor - Floor.floor_ID| to scoreArray list '|x| is used to make value absolute (remove negatives)'
                    ENDIF
                    increment iterator
                ENDFOR
                IF resultArray list is empty THEN
                    FOR all elevators in Column
                        BEGIN with iterator = 1
                        IF Elevator#iterator.direction is "IDLE" AND elevator.heavyLoad is FALSE AND elevator_Online is TRUE
                            ADD iterator to resultArray list
                            ADD |Elevator#iterator.currentFloor - Floor.floor_ID| to scoreArray list '|x| is used to make value absolute (remove negatives)'
                        ENDIF
                        increment iterator
                    ENDFOR
                ENDIF             
                IF resultArray list is empty THEN
                    ADD Floor.floor_ID to queue_FloorRequestDOWN list
                ELSE THEN
                    'Algorithm to decide which of the elevators is nearest from the call'
                    'If my scorearray as multiple value like {2,3,1,6},'
                    'My result array list the id when it sends a score {1,3,4,5}'
                    'After algorithm look for minimum value in score array and save position'
                    'After algorithm send the ID from the result array position'
                    'QUICK SORT PRINCIPLE'
                    READ first number in scoreArray list and SET it to lowValue
                    SET location to 0
                    FOR each score in scoreArray
                        BEGIN with iterator = 1
                        IF scoreArray at position iterator is smaller than lowValue
                            SET scoreArray at position iterator to lowValue
                            SET iterator to location
                            INCREMENT iterator
                        ENDIF
                        RETURN bestElevatorID = ResultArray[scoreArray.location] 'AKA Elevator_i.ID'
                    ENDFOR
                    ADD Floor.floor_ID to Elevator_#bestElevatorID.queueToFloor
                ENDIF
            ELSE IF user press Floor.buttonDown THEN
                Floor.ButtonDownLight = TRUE
                ADD to Floor.userActionLog {Column_clock, "BUTTON DOWN"}
                SET resultArray as a list
                SET scoreArray as a list
                SET bestElevatorID to 0                         'ALL elevators ID should be Higher than 0 on createElevatorList'
                FOR all elevators in Column
                    BEGIN with iterator = 1
                    IF Elevator#iterator.direction is "DOWN" AND Elevator_#iterator.currentFloor is greater than Floor.floor_ID AND elevator.heavyLoad is FALSE AND elevator_Online is TRUE
                        ADD iterator to resultArray list
                        ADD |Elevator#iterator.currentFloor - Floor.floor_ID| to scoreArray list '|x| is use to make value absolute (remove negatives)'
                    ENDIF
                    increment iterator
                ENDFOR
                IF resultArray list is EMPTY THEN
                    FOR all elevators in Column
                        BEGIN with iterator = 1
                        IF Elevator#iterator.direction is "IDLE" AND elevator.heavyLoad is FALSE AND elevator_Online is TRUE
                            ADD iterator to resultArray list
                            ADD |Elevator_#iterator.currentFloor - Floor.floor_ID| to scoreArray list '|x| is use to make value absolute (remove negatives)'
                        ENDIF
                        increment iterator
                    ENDFOR
                ENDIF    
                IF resultArray list is empty THEN
                    ADD Floor.floor_ID to queue_FloorRequestUP list
                ELSE THEN
                    'Algorithm to decide which of the elevators is nearest from the call'
                    'If my scorearray as multiple value like {2,3,1,6},'
                    'My result array list the id when it sends a score {1,3,4,5}'
                    'After algorithm look for minimum value in score array and save position'
                    'After algorithm send the ID from the result array position'
                    'QUICK SORT PRINCIPLE'
                    READ first number in scoreArray list and SET it to lowValue
                    SET location to 0
                    FOR each score in scoreArray
                        BEGIN with iterator = 1
                        IF scoreArray at position iterator is smaller than lowValue
                            SET scoreArray position iterator to lowValue
                            SET iterator to location
                            INCREMENT iterator
                        ENDIF
                        RETURN bestElevatorID = ResultArray[scoreArray.location] 'AKA Elevator_i.ID'
                    ENDFOR
                    ADD Floor.floor_ID to Elevator_#bestElevatorID.queueToFloor
                ENDIF
            ENDIF
            
            'If a user call is still not send to an elevator, it's send to an elevator'
            IF Elevator.direction = "UP"
                ADD Column.queue_FloorRequestUP to Elevator.queueToFloor
            ELSE IF Elevator.direction = "DOWN"
                ADD Column.queue_FloorRequestDOWN to Elevator.queueToFloor
            ENDIF
        ENDSEQUENCE 

        WHILE Column_Online is TRUE THEN
            IF user press Floor.buttonUp or Floor.ButtonDown THEN
                column CALL "delegate" 
            ENDIF
        ENDWHILE

    ENDDEFINE
        
    SET Column1 TO INSTANTIATE Column WITH 1, -6, 0 and 5
    THEN add Column1 to Columnlist 
    SET Column2 TO INSTANTIATE Column WITH 2, 0, 19 and 5
    THEN add Column2 to Columnlist 
    SET Column3 TO INSTANTIATE Column WITH 3, 20, 39 and 5
    THEN add Column3 to Columnlist 
    SET Column4 TO INSTANTIATE Column WITH 4, 40, 59 and 5
    THEN add Column4 to Columnlist 
    'SET Column1 TO INSTANTIATE Column WITH 1, 0, 9 and 2
    'THEN add Column1 to Columnlist       RESIDENTIAL'

ENDDEFINE

SET Battery1 TO INSTANTIATE Battery WITH 1

IF Elevator.emergencyButtonPushed is TRUE THEN
    WHILE Elevator.emergencyButtonPushed is TRUE
    SET elevator_Online TO FALSE
    ENDWHILE
    SET elevator_Online TO TRUE
ENDIF

IF Column.powered is FALSE THEN
    WHILE column.powered is FALSE
    SET column_Online to FALSE
    ENDWHILE
    SET column_Online to TRUE
ENDIF    


'---------------------------'

'Corporate Scenarios, Modern Way
'Floors deserved:
'Column A: B6 to B1 + RC 
'Column B: 2 to 20 + RC 
'Column C: 21 to 40 + RC
'Column D: 41 to 60 + RC

'Scenario 1:
'Elevator B1 at 20th floor going to the 5th floor
'Elevator B2 at 3rd floor going to the 15th floor
'Elevator B3 at 13th floor going to RC
'Elevator B4 at 15th floor going to the 2nd floor
'Elevator B5 at 6th floor going to RC

'Someone at RC wants to go to the 20th floor.
'Elevator B5 is expected to be sent.

'Scenario 2:
'Elevator C1 at RC going to the 21st floor
'Elevator C2 at 23rd floor going to the 28th floor
'Elevator C3 at 33rd floor going to RC
'Elevator C4 at 40th floor going to the 24th floor
'Elevator C5 at 39th floor going to RC

'Someone at RC wants to go to the 36th floor.
'Elevator C1 is expected to be sent.

'Scenario 3:
'Elevator D1 at 58th going to RC
'Elevator D2 at 50th floor going to the 60th floor
'Elevator D3 at 46th floor going to the 58th floor
'Elevator D4 at RC going to the 54th floor
'Elevator D5 at 60th floor going to RC

'Someone at 54e floor wants to go to RC.
'Elevator D1 is expected to be sent.

'Scenario 4:
'Elevator A1 “Idle” at SS4
'Elevator A2 “Idle” at RC
'Elevator A3 at SS3 going to SS5
'Elevator A4 at SS6 going to RC
'Elevator A5 at SS1 going to SS6

'Someone at SS3 wants to go to RC.
'Elevator A4 is expected to be sent.

'---------------------------'